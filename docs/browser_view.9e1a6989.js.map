{"version":3,"sources":["lazyload.js","index.js"],"names":["needsFallback","window","IntersectionObserver","renderImg","imgElement","dataset","srcset","src","runLazyloader","lazyElements","document","querySelectorAll","map","IO","entries","forEach","isIntersecting","target","observe","bind","$imgs","querySelector","getPaths","obj","Object","path","photos","Map","_photos","_ps","set","split","console","log","length","img","Image","width","appendChild"],"mappingsaAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAVP,IAAMA,EAAgB,WAAM,OAACC,OAAOC,sBAI9BC,EAAY,SAAAC,GACVA,EAAWC,QAAQC,SAAQF,EAAWE,OAASF,EAAWC,QAAQC,QAClEF,EAAWC,QAAQE,MAAKH,EAAWG,IAAMH,EAAWC,QAAQE,MAIvDC,EAAgB,WACrB,GAAkB,oBAAXP,OAAP,CAEEQ,IAAAA,EAAmBC,EAAAA,SAASC,iBAAiB,8BAC/CX,GAAAA,IAAiB,OAAOS,EAAaG,IAAIT,GAEvCU,IAAAA,EAAK,IAAIX,qBACX,SAAAY,GAAWA,OAAAA,EAAQC,QAAQ,SAAgC,GAA7BC,IAAAA,EAAAA,EAAAA,eAAgBC,EAAAA,EAAAA,OACtCD,GAAgBb,EAAUc,OAItCR,EAAaG,IAAIC,EAAGK,QAAQC,KAAKN,MAZ9B,QAAA,cAAA;;ACkBP,aA5BA,IAAA,EAAA,EAAA,QAAA,mCAEA,EAAA,QAAA,cA0BA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAxBA,IAAMO,EAAQV,SAASW,cAAc,SAE/BC,EAAW,SAAAC,GAAOC,OAAAA,OAAOV,QAAQS,GAAKX,IAAI,SAAA,GAAca,OAAd,EAAA,EAAA,GAAA,MAE1CC,EAAS,IAAIC,IACbC,EAAUN,EAASO,EAAD,SAExBD,EAAQhB,IAAI,SAAAa,GAAQC,OAAAA,EAAOI,IAAIL,EAAKM,MAAM,KAAK,GAAIN,KAEnDO,QAAQC,IAAIP,EAAQE,EAAQM,QAE5BV,OAAOV,QAAQe,EAAf,SACKjB,IAAI,SAAc,GAAA,IAAVa,EAAU,EAAA,EAAA,GAAA,GACTU,EAAM,IAAIC,MAEhBD,EAAI9B,QAAQE,IAAMkB,EAClBU,EAAIE,MAAQ,IAEZjB,EAAMkB,YAAYH,MAM1B,EAAA,EAAA","file":"browser_view.9e1a6989.js","sourceRoot":"../src/browser_view","sourcesContent":["const needsFallback = () => !window.IntersectionObserver\n\n\n/** @param {HTMLImageElement} imgElement */\nconst renderImg = imgElement => {\n    if (imgElement.dataset.srcset) imgElement.srcset = imgElement.dataset.srcset\n    if (imgElement.dataset.src) imgElement.src = imgElement.dataset.src\n}\n\n\nexport const runLazyloader = () => {\n    if (typeof window === 'undefined') return\n\n    const lazyElements = [...document.querySelectorAll('[data-srcset], [data-src]')]\n    if (needsFallback()) return lazyElements.map(renderImg)\n\n    const IO = new IntersectionObserver(\n        entries => entries.forEach(({ isIntersecting, target }) => {\n            if (isIntersecting) renderImg(target)\n        }),\n    )\n\n    lazyElements.map(IO.observe.bind(IO))\n}\n","import _ps from '../node/filtered_photos/**.png'\n\nimport { runLazyloader } from './lazyload'\n\nconst $imgs = document.querySelector('.imgs')\n\nconst getPaths = obj => Object.entries(obj).map(([, path]) => path)\n\nconst photos = new Map\nconst _photos = getPaths(_ps)\n\n_photos.map(path => photos.set(path.split('.')[0], path))\n\nconsole.log(photos, _photos.length)\n\nObject.entries(_ps)\n    .map(([, path]) => {\n        const img = new Image()\n\n        img.dataset.src = path\n        img.width = 160\n\n        $imgs.appendChild(img)\n    })\n\n\n\n\nrunLazyloader()"]}