!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){(function(t){e.exports=t.env.PROMISE_QUEUE_COVERAGE?n(3):n(4)}).call(this,n(2))},function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var c=10;function f(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function a(e,t,n,r){var o,i,s,u;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=f(e))>0&&s.length>o&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,u=c,console&&console.warn&&console.warn(u)}return e}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):d(o,o.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return f(this)},u.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var u=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw u.context=s,u}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var f=c.length,a=d(c,f);for(n=0;n<f;++n)i(a[n],this,t)}return!0},u.prototype.addListener=function(e,t){return a(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return a(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,l(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,l(this,e,t)),this},u.prototype.removeListener=function(e,t){var n,r,o,i,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},u.prototype.listenerCount=h,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,f=[],a=!1,l=-1;function p(){a&&c&&(a=!1,c.length?f=c.concat(f):l=-1,f.length&&h())}function h(){if(!a){var e=u(p);a=!0;for(var t=f.length;t;){for(c=f,f=[];++l<t;)c&&c[l].run();l=-1,t=f.length}c=null,a=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new d(e,t)),1!==f.length||a||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){var r,o;!function(i,s){"use strict";e.exports?e.exports=s():void 0===(o="function"==typeof(r=s)?r.call(t,n,t,e):r)||(e.exports=o)}(0,function(){"use strict";var e="undefined"!=typeof Promise?Promise:function(){return{then:function(){throw new Error("Queue.configure() before use Queue")}}},t=function(){};function n(e,t,n){this.options=n=n||{},this.pendingPromises=0,this.maxPendingPromises=void 0!==e?e:1/0,this.maxQueuedPromises=void 0!==t?t:1/0,this.queue=[]}return n.configure=function(t){e=t},n.prototype.add=function(n){var r=this;return new e(function(e,o,i){r.queue.length>=r.maxQueuedPromises?o(new Error("Queue limit reached")):(r.queue.push({promiseGenerator:n,resolve:e,reject:o,notify:i||t}),r._dequeue())})},n.prototype.getPendingLength=function(){return this.pendingPromises},n.prototype.getQueueLength=function(){return this.queue.length},n.prototype._dequeue=function(){var t=this;if(this.pendingPromises>=this.maxPendingPromises)return!1;var n,r=this.queue.shift();if(!r)return this.options.onEmpty&&this.options.onEmpty(),!1;try{this.pendingPromises++,(n=r.promiseGenerator(),n&&"function"==typeof n.then?n:new e(function(e){e(n)})).then(function(e){t.pendingPromises--,r.resolve(e),t._dequeue()},function(e){t.pendingPromises--,r.reject(e),t._dequeue()},function(e){r.notify(e)})}catch(e){t.pendingPromises--,r.reject(e),t._dequeue()}return!0},n})},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r);const i=new(n(1).EventEmitter),{ADDED_LINKS:s="added_links",LISTENING_LINKS:u="listening_links"}={},c=()=>[...document.body.querySelectorAll("[href]")].map(e=>e.href).filter(e=>/https:\/\/www\.instagram\.com\/p\//.test(e)),f=c(),a=document.createElement("div");document.body.append(a),i.on(u,()=>{i.emit(s,f,f),document.body.addEventListener("DOMSubtreeModified",()=>{let e=!1,t=0;const n=c().filter(e=>!f.includes(e)).map(n=>(t++,e=!0,n));n.length<1||(f.push(...n),i.emit(s,n,f),e&&console.log(`added ${t} links, total:`,f.length))})});const l=e=>e.map(e=>{const{content:t}=e;return{name:e.getAttribute("property"),content:t}}).filter(e=>e.name&&e.name.match(/og:.+/)).map(e=>{let t=e.name.replace("og:","");const n=e.content.match(/@([^\s)]+)/);if("description"===t&&(e.content=n[1]),"image"===t||"description"===t)return e.content}).filter(e=>!!e),p=async e=>{const t=document.createElement("div");t.innerHTML=e;const[n,r]=l([...t.querySelectorAll("meta")]);return console.info(`Got photo from @${r}`),{user:r,photo:n}};n.d(t,"fetchIFrameData",function(){return m}),n.d(t,"fetchLinkData",function(){return v});const h=Number(prompt("Concurrent"))||2,d=new o.a(h,1/0),m=e=>()=>(async e=>{const t=await e.add(),[n,r]=l([...t.contentWindow.document.querySelectorAll("meta")]);console.info(`Got photo from @${r}`);const o={user:r,photo:n};return e.remove(),o})((e=>{const t=document.createElement("iframe");t.src=e;const n=new Promise(e=>t.onload=(()=>e(t)));return{el:t,add:()=>(a.append(t),n),remove:()=>t.remove()}})(e)),v=e=>()=>fetch(e).then(e=>e.text()).then(p),y=e=>{const t=d.add(e),n=d.getPendingLength(),r=d.getQueueLength();return console.log("Queue Pending",n),console.log("Queue Length",r),t},g=[];i.on(s,(e=>async t=>(console.log("found new links",t),t.map(m).map(y).map(async t=>(e.push(await t),t))))(g)),i.emit(u),console.log(d),console.log("\nCTRL + Z to download"),document.onkeydown=(e=>t=>{const n=window.event?event:t;90==n.keyCode&&n.ctrlKey&&e.map((e,t)=>((e,t)=>{const n="data:text/jsoncharset=utf-8,"+encodeURIComponent(JSON.stringify(e)),r=document.createElement("a");r.setAttribute("href",n),r.setAttribute("download",t+".json"),document.body.appendChild(r),r.click(),r.remove()})(e,`links_${t}`))})([g])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,