!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var c=10;function f(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function a(e,t,n,r){var o,i,s,u;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=f(e))>0&&s.length>o&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,u=c,console&&console.warn&&console.warn(u)}return e}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):d(o,o.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return f(this)},u.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var u=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw u.context=s,u}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var f=c.length,a=d(c,f);for(n=0;n<f;++n)i(a[n],this,t)}return!0},u.prototype.addListener=function(e,t){return a(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return a(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,l(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,l(this,e,t)),this},u.prototype.removeListener=function(e,t){var n,r,o,i,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},u.prototype.listenerCount=h,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){(function(t){e.exports=t.env.PROMISE_QUEUE_COVERAGE?n(3):n(4)}).call(this,n(2))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,f=[],a=!1,l=-1;function p(){a&&c&&(a=!1,c.length?f=c.concat(f):l=-1,f.length&&h())}function h(){if(!a){var e=u(p);a=!0;for(var t=f.length;t;){for(c=f,f=[];++l<t;)c&&c[l].run();l=-1,t=f.length}c=null,a=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new d(e,t)),1!==f.length||a||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){var r,o;!function(i,s){"use strict";e.exports?e.exports=s():void 0===(o="function"==typeof(r=s)?r.call(t,n,t,e):r)||(e.exports=o)}(0,function(){"use strict";var e="undefined"!=typeof Promise?Promise:function(){return{then:function(){throw new Error("Queue.configure() before use Queue")}}},t=function(){};function n(e,t,n){this.options=n=n||{},this.pendingPromises=0,this.maxPendingPromises=void 0!==e?e:1/0,this.maxQueuedPromises=void 0!==t?t:1/0,this.queue=[]}return n.configure=function(t){e=t},n.prototype.add=function(n){var r=this;return new e(function(e,o,i){r.queue.length>=r.maxQueuedPromises?o(new Error("Queue limit reached")):(r.queue.push({promiseGenerator:n,resolve:e,reject:o,notify:i||t}),r._dequeue())})},n.prototype.getPendingLength=function(){return this.pendingPromises},n.prototype.getQueueLength=function(){return this.queue.length},n.prototype._dequeue=function(){var t=this;if(this.pendingPromises>=this.maxPendingPromises)return!1;var n,r=this.queue.shift();if(!r)return this.options.onEmpty&&this.options.onEmpty(),!1;try{this.pendingPromises++,(n=r.promiseGenerator(),n&&"function"==typeof n.then?n:new e(function(e){e(n)})).then(function(e){t.pendingPromises--,r.resolve(e),t._dequeue()},function(e){t.pendingPromises--,r.reject(e),t._dequeue()},function(e){r.notify(e)})}catch(e){t.pendingPromises--,r.reject(e),t._dequeue()}return!0},n})},function(e,t,n){"use strict";n.r(t);const r=new(n(0).EventEmitter),{ADDED_LINKS:o="added_links",LISTENING_LINKS:i="listening_links"}={},s=()=>[...document.body.querySelectorAll("[href]")].map(e=>e.href).filter(e=>/https:\/\/www\.instagram\.com\/p\//.test(e)),u=s(),c=document.createElement("div");document.body.append(c),r.on(i,()=>{r.emit(o,u,u),document.body.addEventListener("DOMSubtreeModified",()=>{let e=!1,t=0;const n=s().filter(e=>!u.includes(e)).map(n=>(t++,e=!0,n));n.length<1||(u.push(...n),r.emit(o,n,u),e&&console.log(`added ${t} links, total:`,u.length))})});const f=e=>e.map(e=>{const{content:t}=e;return{name:e.getAttribute("property"),content:t}}).filter(e=>e.name&&e.name.match(/og:.+/)).map(e=>{let t=e.name.replace("og:","");const n=e.content.match(/@([^\s)]+)/);if("description"===t&&(e.content=n[1]),"image"===t||"description"===t)return e.content}).filter(e=>!!e),a=async e=>{const t=document.createElement("div");t.innerHTML=e;const[n,r]=f([...t.querySelectorAll("meta")]);return console.info(`Got photo from @${r}`),{user:r,photo:n}};var l=n(1),p=n.n(l);const h=Number(prompt("Concurrent"))||2,d=new p.a(h,1/0);n.d(t,"fetchIFrameData",function(){return m}),n.d(t,"fetchLinkData",function(){return v});const m=e=>()=>(async e=>{const t=await e.add(),[n,r]=f([...t.contentWindow.document.querySelectorAll("meta")]);console.info(`Got photo from @${r}`);const o={user:r,photo:n};return e.remove(),o})((e=>{const t=document.createElement("iframe");t.src=e,t.style.display="none";const n=new Promise(e=>t.onload=(()=>e(t)));return{el:t,add:()=>(c.append(t),n),remove:()=>t.remove()}})(e)),v=e=>()=>fetch(e).then(e=>e.text()).then(a),y=e=>{const t=d.add(e),n=d.getPendingLength(),r=d.getQueueLength();return console.log("Queue Pending",n),console.log("Queue Length",r),t},g=[];r.on(o,(e=>async t=>(console.log("found new links",t),t.map(v).map(y).map(async t=>(e.push(await t),t))))(g)),r.emit(i),console.log(d),console.log("\nCTRL + Z to download"),document.onkeydown=(e=>t=>{const n=window.event?event:t;90==n.keyCode&&n.ctrlKey&&e.map((e,t)=>((e,t)=>{const n="data:text/jsoncharset=utf-8,"+encodeURIComponent(JSON.stringify(e)),r=document.createElement("a");r.setAttribute("href",n),r.setAttribute("download",t+".json"),document.body.appendChild(r),r.click(),r.remove()})(e,`links_${t}`))})([g])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcXVldWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS1xdWV1ZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9ET00uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvcXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJ0aGlzIiwiX2V2ZW50cyIsInVuZGVmaW5lZCIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiVHlwZUVycm9yIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsInB1c2giLCJsZW5ndGgiLCJ3YXJuZWQiLCJ3IiwiRXJyb3IiLCJTdHJpbmciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIl9vbmNlV3JhcCIsInN0YXRlIiwiZmlyZWQiLCJ3cmFwRm4iLCJ3cmFwcGVkIiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsImFyciIsInJldCIsIkFycmF5IiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJjb3B5Iiwic2V0IiwiYXJnIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVycm9yIiwiZXIiLCJlcnIiLCJtZXNzYWdlIiwiY29udGV4dCIsImhhbmRsZXIiLCJsZW4iLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsIm9uIiwicHJlcGVuZExpc3RlbmVyIiwib25jZSIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0IiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInBvcCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwicHJvY2VzcyIsImVudiIsIlBST01JU0VfUVVFVUVfQ09WRVJBR0UiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImUiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJyb290IiwiZmFjdG9yeSIsIkxvY2FsUHJvbWlzZSIsIlByb21pc2UiLCJ0aGVuIiwiUXVldWUiLCJtYXhQZW5kaW5nUHJvbWlzZXMiLCJtYXhRdWV1ZWRQcm9taXNlcyIsIm9wdGlvbnMiLCJwZW5kaW5nUHJvbWlzZXMiLCJJbmZpbml0eSIsImNvbmZpZ3VyZSIsIkdsb2JhbFByb21pc2UiLCJhZGQiLCJwcm9taXNlR2VuZXJhdG9yIiwic2VsZiIsInJlc29sdmUiLCJyZWplY3QiLCJub3RpZnkiLCJfZGVxdWV1ZSIsImdldFBlbmRpbmdMZW5ndGgiLCJnZXRRdWV1ZUxlbmd0aCIsIml0ZW0iLCJvbkVtcHR5IiwiQURERURfTElOS1MiLCJMSVNURU5JTkdfTElOS1MiLCJnZXRMaW5rcyIsImRvY3VtZW50IiwiYm9keSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXAiLCJhIiwiaHJlZiIsImZpbHRlciIsImxpbmsiLCJ0ZXN0IiwibGlua3MiLCJ3cmFwcGVyIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhbnlBZGRlZCIsIm5ld0xpbmtzIiwiaW5jbHVkZXMiLCJsb2ciLCJnZXRNZXRhRGF0YSIsIm1ldGEiLCJjb250ZW50IiwiZ2V0QXR0cmlidXRlIiwibWF0Y2giLCJyZXBsYWNlIiwiZ2V0TGlua0RhdGEiLCJhc3luYyIsImRpdiIsImlubmVySFRNTCIsImh0bWwiLCJwaG90byIsInVzZXIiLCJpbmZvIiwibWF4Q29uY3VycmVudCIsInByb21wdCIsInByb21pc2VfcXVldWVfZGVmYXVsdCIsImZldGNoSUZyYW1lRGF0YSIsImVsIiwiaWZyYW1lIiwiY29udGVudFdpbmRvdyIsIm9iaiIsInJlbW92ZSIsImdldElGcmFtZURhdGEiLCJzcmMiLCJzdHlsZSIsImRpc3BsYXkiLCJsb2FkIiwicnMiLCJvbmxvYWQiLCJtYWtlSUZyYW1lIiwiZmV0Y2hMaW5rRGF0YSIsImZldGNoIiwidGV4dCIsImFkZDJRdWV1ZSIsInBnIiwicSIsInBlbmRpbmciLCJwaG90b3MiLCJhZGRlZExpbmtzIiwicGhvdG9Qcm9taXNlIiwicXVldWVMaW5rcyIsIm9ua2V5ZG93biIsImZpbGVzIiwiZXZ0b2JqIiwid2luZG93IiwiZXZlbnQiLCJrZXlDb2RlIiwiY3RybEtleSIsImZpbGUiLCJleHBvcnRPYmoiLCJleHBvcnROYW1lIiwiZGF0YVN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkb3dubG9hZEFuY2hvck5vZGUiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwiZG93bmxvYWRKc29uIiwic2F2ZUxpbmtzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEs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QSxlQUFBNUksR0FFQWlMLEdBcUJBRSxFQUFBLEdBQ0E5SyxFQUFPcUMsR0FBSThFLEVBaEJYMkQsSUFBQS9CLE1BQUFnQyxJQUNBN0ssUUFBQXFJLElBQUEsa0JBQUF3QyxHQU9BQSxFQUNBdEQsSUFBQThDLEdBQ0E5QyxJQUFBaUQsR0FDQWpELElBUkFzQixVQUNBK0IsRUFBQXBMLFdBQUFzTCxHQUNBQSxLQVdzQkMsQ0FBQUgsSUFDdEI5SyxFQUFPUixLQUFNNEgsR0FFYmxILFFBQUFxSSxJQUFZckUsR0FFWmhFLFFBQUFxSSxJQUFBLDBCQUNBakIsU0FBQTRELFVGeENPQyxJQUFBcEgsSUFDUCxNQUFBcUgsRUFBQUMsT0FBQUMsWUFBQXZILEVBQ0EsSUFBQXFILEVBQUFHLFNBQUFILEVBQUFJLFNBQ0FMLEVBQUExRCxJQUFBLENBQUFnRSxFQUFBcFEsSUdBTyxFQUFBcVEsRUFBQUMsS0FDUCxNQUFBQyxFQUFBLCtCQUFBQyxtQkFBQUMsS0FBQUMsVUFBQUwsSUFDQU0sRUFBQTFFLFNBQUFXLGNBQUEsS0FFQStELEVBQUFDLGFBQUEsT0FBQUwsR0FDQUksRUFBQUMsYUFBQSxXQUFBTixFQUFBLFNBRUFyRSxTQUFBQyxLQUFBMkUsWUFBQUYsR0FFQUEsRUFBQUcsUUFDQUgsRUFBQWxDLFVIVitCc0MsQ0FBWVgsV0FBZ0JwUSxPRXFDdENnUixDQUFTLENBQUF2QiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgUmVmbGVjdEFwcGx5KHRoaXMubGlzdGVuZXIsIHRoaXMudGFyZ2V0LCBhcmdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3MuZW52LlBST01JU0VfUVVFVUVfQ09WRVJBR0UgP1xuICAgIHJlcXVpcmUoJy4vbGliLWNvdicpIDpcbiAgICByZXF1aXJlKCcuL2xpYicpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qIGdsb2JhbCBkZWZpbmUsIFByb21pc2UgKi9cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gQ29tbW9uSlNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShmYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgcm9vdC5RdWV1ZSA9IGZhY3RvcnkoKTtcbiAgICB9XG59KVxuKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgdmFyIExvY2FsUHJvbWlzZSA9IHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyA/IFByb21pc2UgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWV1ZS5jb25maWd1cmUoKSBiZWZvcmUgdXNlIFF1ZXVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHJldHVybnMge0xvY2FsUHJvbWlzZX1cbiAgICAgKi9cbiAgICB2YXIgcmVzb2x2ZVdpdGggPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IExvY2FsUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJdCBsaW1pdHMgY29uY3VycmVudGx5IGV4ZWN1dGVkIHByb21pc2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW21heFBlbmRpbmdQcm9taXNlcz1JbmZpbml0eV0gbWF4IG51bWJlciBvZiBjb25jdXJyZW50bHkgZXhlY3V0ZWQgcHJvbWlzZXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW21heFF1ZXVlZFByb21pc2VzPUluZmluaXR5XSAgbWF4IG51bWJlciBvZiBxdWV1ZWQgcHJvbWlzZXNcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcXVldWUgPSBuZXcgUXVldWUoMSk7XG4gICAgICpcbiAgICAgKiBxdWV1ZS5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAvLyByZXNvbHZlIG9mIHRoaXMgcHJvbWlzZSB3aWxsIHJlc3VtZSBuZXh0IHJlcXVlc3RcbiAgICAgKiAgICAgcmV0dXJuIGRvd25sb2FkVGFyYmFsbEZyb21HaXRodWIodXJsLCBmaWxlKTtcbiAgICAgKiB9KVxuICAgICAqIC50aGVuKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICogICAgIGRvU3R1ZmZXaXRoKGZpbGUpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcXVldWUuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgcmV0dXJuIGRvd25sb2FkVGFyYmFsbEZyb21HaXRodWIodXJsLCBmaWxlKTtcbiAgICAgKiB9KVxuICAgICAqIC8vIFRoaXMgcmVxdWVzdCB3aWxsIGJlIHBhdXNlZFxuICAgICAqIC50aGVuKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICogICAgIGRvU3R1ZmZXaXRoKGZpbGUpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFF1ZXVlKG1heFBlbmRpbmdQcm9taXNlcywgbWF4UXVldWVkUHJvbWlzZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMucGVuZGluZ1Byb21pc2VzID0gMDtcbiAgICAgICAgdGhpcy5tYXhQZW5kaW5nUHJvbWlzZXMgPSB0eXBlb2YgbWF4UGVuZGluZ1Byb21pc2VzICE9PSAndW5kZWZpbmVkJyA/IG1heFBlbmRpbmdQcm9taXNlcyA6IEluZmluaXR5O1xuICAgICAgICB0aGlzLm1heFF1ZXVlZFByb21pc2VzID0gdHlwZW9mIG1heFF1ZXVlZFByb21pc2VzICE9PSAndW5kZWZpbmVkJyA/IG1heFF1ZXVlZFByb21pc2VzIDogSW5maW5pdHk7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHByb21pc2UgcHJvbWlzZUZhY3RvcnlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBHbG9iYWxQcm9taXNlXG4gICAgICovXG4gICAgUXVldWUuY29uZmlndXJlID0gZnVuY3Rpb24gKEdsb2JhbFByb21pc2UpIHtcbiAgICAgICAgTG9jYWxQcm9taXNlID0gR2xvYmFsUHJvbWlzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvbWlzZUdlbmVyYXRvclxuICAgICAqIEByZXR1cm4ge0xvY2FsUHJvbWlzZX1cbiAgICAgKi9cbiAgICBRdWV1ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHByb21pc2VHZW5lcmF0b3IpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IExvY2FsUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0LCBub3RpZnkpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBxdWV1ZSB0byBtdWNoIHByb21pc2VzXG4gICAgICAgICAgICBpZiAoc2VsZi5xdWV1ZS5sZW5ndGggPj0gc2VsZi5tYXhRdWV1ZWRQcm9taXNlcykge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1F1ZXVlIGxpbWl0IHJlYWNoZWQnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgdG8gcXVldWVcbiAgICAgICAgICAgIHNlbGYucXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgcHJvbWlzZUdlbmVyYXRvcjogcHJvbWlzZUdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgICAgICAgIHJlamVjdDogcmVqZWN0LFxuICAgICAgICAgICAgICAgIG5vdGlmeTogbm90aWZ5IHx8IG5vb3BcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzZWxmLl9kZXF1ZXVlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2Ygc2ltdWx0YW5lb3VzbHkgcnVubmluZyBwcm9taXNlcyAod2hpY2ggYXJlIHJlc29sdmluZylcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBRdWV1ZS5wcm90b3R5cGUuZ2V0UGVuZGluZ0xlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ1Byb21pc2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgcXVldWVkIHByb21pc2VzICh3aGljaCBhcmUgd2FpdGluZylcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBRdWV1ZS5wcm90b3R5cGUuZ2V0UXVldWVMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmxlbmd0aDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZmlyc3QgaXRlbSByZW1vdmVkIGZyb20gcXVldWVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFF1ZXVlLnByb3RvdHlwZS5fZGVxdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5wZW5kaW5nUHJvbWlzZXMgPj0gdGhpcy5tYXhQZW5kaW5nUHJvbWlzZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBmcm9tIHF1ZXVlXG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub25FbXB0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vbkVtcHR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUHJvbWlzZXMrKztcblxuICAgICAgICAgICAgcmVzb2x2ZVdpdGgoaXRlbS5wcm9taXNlR2VuZXJhdG9yKCkpXG4gICAgICAgICAgICAvLyBGb3J3YXJkIGFsbCBzdHVmZlxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJdCBpcyBub3QgcGVuZGluZyBub3dcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wZW5kaW5nUHJvbWlzZXMtLTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgc2hvdWxkIHBhc3MgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2RlcXVldWUoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEl0IGlzIG5vdCBwZW5kaW5nIG5vd1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnBlbmRpbmdQcm9taXNlcy0tO1xuICAgICAgICAgICAgICAgICAgICAvLyBJdCBzaG91bGQgbm90IG1hc2sgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2RlcXVldWUoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJdCBzaG91bGQgcGFzcyBub3RpZmljYXRpb25zXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ubm90aWZ5KG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNlbGYucGVuZGluZ1Byb21pc2VzLS07XG4gICAgICAgICAgICBpdGVtLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgc2VsZi5fZGVxdWV1ZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFF1ZXVlO1xufSk7XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnXHJcblxyXG5leHBvcnQgY29uc3QgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCB7XHJcbiAgICBBRERFRF9MSU5LUyA9ICdhZGRlZF9saW5rcycsXHJcbiAgICBMSVNURU5JTkdfTElOS1MgPSAnbGlzdGVuaW5nX2xpbmtzJ1xyXG59ID0ge30iLCJpbXBvcnQgeyBkb3dubG9hZEpzb24gfSBmcm9tICcuLi9oZWxwZXJzJ1xyXG5pbXBvcnQgeyBBRERFRF9MSU5LUywgZW1pdHRlciwgTElTVEVOSU5HX0xJTktTIH0gZnJvbSAnLi4vZXZlbnRzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldExpbmtzID0gKCkgPT4gWy4uLmRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnW2hyZWZdJyldXHJcbiAgICAubWFwKGEgPT4gYS5ocmVmKVxyXG4gICAgLmZpbHRlcihsaW5rID0+IC9odHRwczpcXC9cXC93d3dcXC5pbnN0YWdyYW1cXC5jb21cXC9wXFwvLy50ZXN0KGxpbmspKVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBzYXZlTGlua3MgPSBmaWxlcyA9PiBlID0+IHtcclxuICAgIGNvbnN0IGV2dG9iaiA9IHdpbmRvdy5ldmVudCA/IGV2ZW50IDogZVxyXG4gICAgaWYgKGV2dG9iai5rZXlDb2RlID09IDkwICYmIGV2dG9iai5jdHJsS2V5KSB7XHJcbiAgICAgICAgZmlsZXMubWFwKChmaWxlLCBpKSA9PiBkb3dubG9hZEpzb24oZmlsZSwgYGxpbmtzXyR7aX1gKSlcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGxpbmtzID0gZ2V0TGlua3MoKVxyXG5cclxuZXhwb3J0IGNvbnN0IGxpc3RlbkxpbmtzID0gKCkgPT4ge1xyXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCAoKSA9PiB7XHJcblxyXG4gICAgICAgIGxldCBhbnlBZGRlZCA9IGZhbHNlXHJcbiAgICAgICAgbGV0IGNvdW50ID0gMFxyXG5cclxuICAgICAgICBjb25zdCBuZXdMaW5rcyA9IGdldExpbmtzKClcclxuICAgICAgICAgICAgLmZpbHRlcihsaW5rID0+ICFsaW5rcy5pbmNsdWRlcyhsaW5rKSlcclxuICAgICAgICAgICAgLm1hcChsaW5rID0+IHtcclxuICAgICAgICAgICAgICAgIGNvdW50KytcclxuICAgICAgICAgICAgICAgIGFueUFkZGVkID0gdHJ1ZVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBsaW5rXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIGlmIChuZXdMaW5rcy5sZW5ndGggPCAxKSByZXR1cm5cclxuXHJcbiAgICAgICAgbGlua3MucHVzaCguLi5uZXdMaW5rcylcclxuICAgICAgICBlbWl0dGVyLmVtaXQoQURERURfTElOS1MsIG5ld0xpbmtzLCBsaW5rcylcclxuXHJcbiAgICAgICAgaWYgKGFueUFkZGVkKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgYWRkZWQgJHtjb3VudH0gbGlua3MsIHRvdGFsOmAsIGxpbmtzLmxlbmd0aClcclxuICAgIH0pXHJcbn1cclxuXHJcbi8vIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJydcclxuY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kKHdyYXBwZXIpXHJcblxyXG5lbWl0dGVyLm9uKExJU1RFTklOR19MSU5LUywgKCkgPT4ge1xyXG4gICAgZW1pdHRlci5lbWl0KEFEREVEX0xJTktTLCBsaW5rcywgbGlua3MpXHJcbiAgICBsaXN0ZW5MaW5rcygpXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0TWV0YURhdGEgPSBhcnIgPT4gYXJyXHJcbiAgICAubWFwKG1ldGEgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudCB9ID0gbWV0YVxyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBtZXRhLmdldEF0dHJpYnV0ZSgncHJvcGVydHknKVxyXG5cclxuICAgICAgICByZXR1cm4geyBuYW1lLCBjb250ZW50IH1cclxuICAgIH0pXHJcbiAgICAuZmlsdGVyKGEgPT4gYS5uYW1lICYmIGEubmFtZS5tYXRjaCgvb2c6LisvKSlcclxuICAgIC5tYXAobWV0YSA9PiB7XHJcbiAgICAgICAgbGV0IG5hbWUgPSBtZXRhLm5hbWUucmVwbGFjZSgnb2c6JywgJycpXHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBtZXRhLmNvbnRlbnQubWF0Y2goL0AoW15cXHMpXSspLylcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ2Rlc2NyaXB0aW9uJykge1xyXG4gICAgICAgICAgICBtZXRhLmNvbnRlbnQgPSBtYXRjaFsxXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICdpbWFnZScgfHwgbmFtZSA9PT0gJ2Rlc2NyaXB0aW9uJylcclxuICAgICAgICAgICAgcmV0dXJuIG1ldGEuY29udGVudFxyXG4gICAgfSlcclxuICAgIC5maWx0ZXIoYSA9PiAhIWEpXHJcblxyXG5leHBvcnQgY29uc3QgbWFrZUlGcmFtZSA9IHNyYyA9PiB7XHJcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpXHJcbiAgICBlbC5zcmMgPSBzcmNcclxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuXHJcbiAgICAvKipAdHlwZSB7IFByb21pc2U8SFRNTElGcmFtZUVsZW1lbnQ+IH0gKi9cclxuICAgIGNvbnN0IGxvYWQgPSBuZXcgUHJvbWlzZShycyA9PiBlbC5vbmxvYWQgPSAoKSA9PiBycyhlbCkpXHJcbiAgICBjb25zdCBhZGQgPSAoKSA9PiB7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQoZWwpXHJcbiAgICAgICAgcmV0dXJuIGxvYWRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBlbCwgYWRkLCByZW1vdmU6ICgpID0+IGVsLnJlbW92ZSgpIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldElGcmFtZURhdGEgPSBhc3luYyBpZnJhbWUgPT4ge1xyXG4gICAgY29uc3QgZWwgPSBhd2FpdCBpZnJhbWUuYWRkKClcclxuXHJcbiAgICBjb25zdCBbcGhvdG8sIHVzZXJdID0gZ2V0TWV0YURhdGEoWy4uLmVsLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbWV0YScpXSlcclxuICAgIGNvbnNvbGUuaW5mbyhgR290IHBob3RvIGZyb20gQCR7dXNlcn1gKVxyXG5cclxuICAgIGNvbnN0IG9iaiA9IHsgdXNlciwgcGhvdG8gfVxyXG4gICAgaWZyYW1lLnJlbW92ZSgpXHJcblxyXG4gICAgcmV0dXJuIG9ialxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldExpbmtEYXRhID0gYXN5bmMgaHRtbCA9PiB7XHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgZGl2LmlubmVySFRNTCA9IGh0bWxcclxuXHJcbiAgICBjb25zdCBbcGhvdG8sIHVzZXJdID0gZ2V0TWV0YURhdGEoWy4uLmRpdi5xdWVyeVNlbGVjdG9yQWxsKCdtZXRhJyldKVxyXG4gICAgY29uc29sZS5pbmZvKGBHb3QgcGhvdG8gZnJvbSBAJHt1c2VyfWApXHJcblxyXG4gICAgY29uc3Qgb2JqID0geyB1c2VyLCBwaG90byB9XHJcblxyXG4gICAgcmV0dXJuIG9ialxyXG59IiwiaW1wb3J0IFF1ZXVlIGZyb20gJ3Byb21pc2UtcXVldWUnXHJcblxyXG5jb25zdCBtYXhDb25jdXJyZW50ID0gTnVtYmVyKHByb21wdCgnQ29uY3VycmVudCcpKSB8fCAyXHJcbmNvbnN0IG1heFF1ZXVlID0gSW5maW5pdHlcclxuZXhwb3J0IGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlKG1heENvbmN1cnJlbnQsIG1heFF1ZXVlKSIsIlxyXG5pbXBvcnQgeyBnZXRMaW5rRGF0YSwgc2F2ZUxpbmtzLCBnZXRJRnJhbWVEYXRhLCBtYWtlSUZyYW1lIH0gZnJvbSAnLi9ET00nXHJcbmltcG9ydCB7IEFEREVEX0xJTktTLCBMSVNURU5JTkdfTElOS1MsIGVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnXHJcbmltcG9ydCB7IHF1ZXVlIH0gZnJvbSAnLi9xdWV1ZSdcclxuXHJcblxyXG5leHBvcnQgY29uc3QgZmV0Y2hJRnJhbWVEYXRhID0gbGluayA9PiAoKSA9PiBnZXRJRnJhbWVEYXRhKG1ha2VJRnJhbWUobGluaykpXHJcbmV4cG9ydCBjb25zdCBmZXRjaExpbmtEYXRhID0gbGluayA9PiAoKSA9PiBmZXRjaChsaW5rKVxyXG4gICAgLnRoZW4ociA9PiByLnRleHQoKSlcclxuICAgIC50aGVuKGdldExpbmtEYXRhKVxyXG5cclxuXHJcbmNvbnN0IGFkZDJRdWV1ZSA9IHBnID0+IHtcclxuICAgIGNvbnN0IHEgPSBxdWV1ZS5hZGQocGcpXHJcbiAgICBjb25zdCBwZW5kaW5nID0gcXVldWUuZ2V0UGVuZGluZ0xlbmd0aCgpXHJcbiAgICBjb25zdCBsZW5ndGggPSBxdWV1ZS5nZXRRdWV1ZUxlbmd0aCgpXHJcblxyXG4gICAgY29uc29sZS5sb2coJ1F1ZXVlIFBlbmRpbmcnLCBwZW5kaW5nKVxyXG4gICAgY29uc29sZS5sb2coJ1F1ZXVlIExlbmd0aCcsIGxlbmd0aClcclxuXHJcbiAgICByZXR1cm4gcVxyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHsgc3RyaW5nW10gfSBhZGRlZExpbmtzIFxyXG4gKi9cclxuY29uc3QgcXVldWVMaW5rcyA9IHBob3RvcyA9PiBhc3luYyAoYWRkZWRMaW5rcykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2ZvdW5kIG5ldyBsaW5rcycsIGFkZGVkTGlua3MpXHJcblxyXG4gICAgY29uc3QgcHVzaFBob3RvcyA9IGFzeW5jIHBob3RvUHJvbWlzZSA9PiB7XHJcbiAgICAgICAgcGhvdG9zLnB1c2goYXdhaXQgcGhvdG9Qcm9taXNlKVxyXG4gICAgICAgIHJldHVybiBwaG90b1Byb21pc2VcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWRkZWRMaW5rc1xyXG4gICAgICAgIC5tYXAoZmV0Y2hMaW5rRGF0YSlcclxuICAgICAgICAubWFwKGFkZDJRdWV1ZSlcclxuICAgICAgICAubWFwKHB1c2hQaG90b3MpXHJcbn1cclxuXHJcblxyXG5jb25zdCBwaG90b3MgPSBbXVxyXG5lbWl0dGVyLm9uKEFEREVEX0xJTktTLCBxdWV1ZUxpbmtzKHBob3RvcykpXHJcbmVtaXR0ZXIuZW1pdChMSVNURU5JTkdfTElOS1MpXHJcblxyXG5jb25zb2xlLmxvZyhxdWV1ZSlcclxuXHJcbmNvbnNvbGUubG9nKCdcXG5DVFJMICsgWiB0byBkb3dubG9hZCcpXHJcbmRvY3VtZW50Lm9ua2V5ZG93biA9IHNhdmVMaW5rcyhbcGhvdG9zXSlcclxuIiwiLyoqIEB0eXBlIHs8VD4oYXJyOiBUW10sIGxlbjogbnVtYmVyKSA9PiBUW11bXX0gKi9cclxuZXhwb3J0IGNvbnN0IGNodW5rQXJyID0gKGFyciwgbGVuKSA9PiB7XHJcbiAgICBjb25zdCBjaHVua3MgPSBbXVxyXG4gICAgY29uc3QgbiA9IGFyci5sZW5ndGhcclxuXHJcbiAgICBsZXQgaSA9IDBcclxuICAgIHdoaWxlIChpIDwgbikgY2h1bmtzLnB1c2goYXJyLnNsaWNlKGksIGkgKz0gbGVuKSlcclxuXHJcbiAgICByZXR1cm4gY2h1bmtzXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkb3dubG9hZEpzb24gPSAoZXhwb3J0T2JqLCBleHBvcnROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBkYXRhU3RyID0gJ2RhdGE6dGV4dC9qc29uY2hhcnNldD11dGYtOCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGV4cG9ydE9iaikpXHJcbiAgICBjb25zdCBkb3dubG9hZEFuY2hvck5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcclxuXHJcbiAgICBkb3dubG9hZEFuY2hvck5vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgZGF0YVN0cilcclxuICAgIGRvd25sb2FkQW5jaG9yTm9kZS5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZXhwb3J0TmFtZSArICcuanNvbicpXHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb3dubG9hZEFuY2hvck5vZGUpXHJcblxyXG4gICAgZG93bmxvYWRBbmNob3JOb2RlLmNsaWNrKClcclxuICAgIGRvd25sb2FkQW5jaG9yTm9kZS5yZW1vdmUoKVxyXG59XHJcblxyXG4vKipcclxuICogQHRlbXBsYXRlIFQsIFNcclxuICogQHBhcmFtIHsgVCB9IG9ialxyXG4gKiBAcGFyYW0geyAoaXRlbToga2V5b2YgVCwgcHJvcGVydHk6IHN0cmluZykgPT4gUyB9IGNiXHJcbiAqIEByZXR1cm5zIHsgU1tdIH1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBPYmoob2JqLCBjYikge1xyXG4gICAgY29uc3QgYXJyID0gW11cclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBvYmpba2V5XVxyXG5cclxuICAgICAgICBhcnIucHVzaChjYihpdGVtLCBrZXkpKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJcclxufVxyXG5cclxuLyoqXHJcbiAqIFJhbmRvbWx5IHNodWZmbGUgYW4gYXJyYXlcclxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI0NTA5NzYvMTI5MzI1NlxyXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGVcclxuICogQHJldHVybiB7IEFycmF5IH0gICAgICBUaGUgZmlyc3QgaXRlbSBpbiB0aGUgc2h1ZmZsZWQgYXJyYXlcclxuICovXHJcbmV4cG9ydCB2YXIgc2h1ZmZsZSA9IGZ1bmN0aW9uIChhcnIpIHtcclxuICAgIGNvbnN0IGFycmF5ID0gWy4uLmFycl1cclxuXHJcbiAgICB2YXIgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoXHJcbiAgICB2YXIgdGVtcG9yYXJ5VmFsdWUsIHJhbmRvbUluZGV4XHJcblxyXG4gICAgLy8gV2hpbGUgdGhlcmUgcmVtYWluIGVsZW1lbnRzIHRvIHNodWZmbGUuLi5cclxuICAgIHdoaWxlICgwICE9PSBjdXJyZW50SW5kZXgpIHtcclxuICAgICAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnQuLi5cclxuICAgICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleClcclxuICAgICAgICBjdXJyZW50SW5kZXggLT0gMVxyXG5cclxuICAgICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSBhcnJheVtjdXJyZW50SW5kZXhdXHJcbiAgICAgICAgYXJyYXlbY3VycmVudEluZGV4XSA9IGFycmF5W3JhbmRvbUluZGV4XVxyXG4gICAgICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRlbXBvcmFyeVZhbHVlXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5XHJcblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVzb2x1dGlvbjJSYXRpbyA9ICh3LCBoKSA9PiB7XHJcbiAgICBjb25zdCBnY2QgPSAodywgaCkgPT4gKGggPT0gMCkgPyB3IDogZ2NkKGgsIHcgJSBoKVxyXG4gICAgY29uc3QgciA9IGdjZCh3LCBoKVxyXG5cclxuICAgIHJldHVybiBbdyAvIHIsIGggLyByXVxyXG59ICAgIl0sInNvdXJjZVJvb3QiOiIifQ==