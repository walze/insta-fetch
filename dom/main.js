!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var c=10;function f(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function a(e,t,n,r){var o,i,s,u;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=f(e))>0&&s.length>o&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,u=c,console&&console.warn&&console.warn(u)}return e}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):d(o,o.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return f(this)},u.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var u=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw u.context=s,u}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var f=c.length,a=d(c,f);for(n=0;n<f;++n)i(a[n],this,t)}return!0},u.prototype.addListener=function(e,t){return a(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return a(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,l(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,l(this,e,t)),this},u.prototype.removeListener=function(e,t){var n,r,o,i,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},u.prototype.listenerCount=h,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){(function(t){e.exports=t.env.PROMISE_QUEUE_COVERAGE?n(3):n(4)}).call(this,n(2))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,f=[],a=!1,l=-1;function p(){a&&c&&(a=!1,c.length?f=c.concat(f):l=-1,f.length&&h())}function h(){if(!a){var e=u(p);a=!0;for(var t=f.length;t;){for(c=f,f=[];++l<t;)c&&c[l].run();l=-1,t=f.length}c=null,a=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new d(e,t)),1!==f.length||a||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){var r,o;!function(i,s){"use strict";e.exports?e.exports=s():void 0===(o="function"==typeof(r=s)?r.call(t,n,t,e):r)||(e.exports=o)}(0,function(){"use strict";var e="undefined"!=typeof Promise?Promise:function(){return{then:function(){throw new Error("Queue.configure() before use Queue")}}},t=function(){};function n(e,t,n){this.options=n=n||{},this.pendingPromises=0,this.maxPendingPromises=void 0!==e?e:1/0,this.maxQueuedPromises=void 0!==t?t:1/0,this.queue=[]}return n.configure=function(t){e=t},n.prototype.add=function(n){var r=this;return new e(function(e,o,i){r.queue.length>=r.maxQueuedPromises?o(new Error("Queue limit reached")):(r.queue.push({promiseGenerator:n,resolve:e,reject:o,notify:i||t}),r._dequeue())})},n.prototype.getPendingLength=function(){return this.pendingPromises},n.prototype.getQueueLength=function(){return this.queue.length},n.prototype._dequeue=function(){var t=this;if(this.pendingPromises>=this.maxPendingPromises)return!1;var n,r=this.queue.shift();if(!r)return this.options.onEmpty&&this.options.onEmpty(),!1;try{this.pendingPromises++,(n=r.promiseGenerator(),n&&"function"==typeof n.then?n:new e(function(e){e(n)})).then(function(e){t.pendingPromises--,r.resolve(e),t._dequeue()},function(e){t.pendingPromises--,r.reject(e),t._dequeue()},function(e){r.notify(e)})}catch(e){t.pendingPromises--,r.reject(e),t._dequeue()}return!0},n})},function(e,t,n){"use strict";n.r(t);const r=new(n(0).EventEmitter),{ADDED_LINKS:o="added_links",LISTENING_LINKS:i="listening_links"}={},s=()=>[...document.body.querySelectorAll("[href]")].map(e=>e.href).filter(e=>/https:\/\/www\.instagram\.com\/p\//.test(e)),u=s(),c=document.createElement("div");document.body.append(c),r.on(i,()=>{r.emit(o,u,u),document.body.addEventListener("DOMSubtreeModified",()=>{let e=!1,t=0;const n=s().filter(e=>!u.includes(e)).map(n=>(t++,e=!0,n));n.length<1||(u.push(...n),r.emit(o,n,u),e&&console.log(`added ${t} links, total:`,u.length))})});const f=e=>{const t=e.map(e=>{const{content:t}=e;return{name:e.getAttribute("property"),content:t}}).filter(e=>e.name&&e.name.match(/og:.+/)).map(e=>{return{[e.name.replace("og:","")]:e.content}}).filter(e=>!!e).reduce((e,t)=>{for(const n in t)if(t.hasOwnProperty(n)){return{...e,[n]:t[n]}}});return t.user=t.description.match(/@([^\s)]+)/)[1],t.id=t.url.split(/\/(.+?)\//)[3],t},a=async e=>{const t=document.createElement("div");t.innerHTML=e;const n=f([...t.querySelectorAll("meta")]);return console.info(`Got image from @${n.user}`),n};var l=n(1),p=n.n(l);const h=Number(prompt("Concurrent"))||2,d=new p.a(h,1/0);n.d(t,"fetchIFrameData",function(){return m}),n.d(t,"fetchLinkData",function(){return v});const m=e=>()=>(async e=>{const t=await e.add(),n=f([...t.contentWindow.document.querySelectorAll("meta")]);return console.info(`Got image from @${n.user}`),e.remove(),n})((e=>{const t=document.createElement("iframe");t.src=e,t.style.display="none";const n=new Promise(e=>t.onload=(()=>e(t)));return{el:t,add:()=>(c.append(t),n),remove:()=>t.remove()}})(e)),v=e=>()=>fetch(e).then(e=>e.text()).then(a),y=e=>{return d.add(e)},g=[];r.on(o,(e=>async t=>t.map(v).map(y).map(async t=>(e.push(await t),t)))(g)),r.emit(i),console.log(d),console.log("\nCTRL + Z to download"),document.onkeydown=(e=>t=>{const n=window.event?event:t;90==n.keyCode&&n.ctrlKey&&e.map((e,t)=>((e,t)=>{const n="data:text/jsoncharset=utf-8,"+encodeURIComponent(JSON.stringify(e)),r=document.createElement("a");r.setAttribute("href",n),r.setAttribute("download",t+".json"),document.body.appendChild(r),r.click(),r.remove()})(e,`links_${t}`))})([g])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcXVldWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS1xdWV1ZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9ET00uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvcXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJ0aGlzIiwiX2V2ZW50cyIsInVuZGVmaW5lZCIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiVHlwZUVycm9yIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsInB1c2giLCJsZW5ndGgiLCJ3YXJuZWQiLCJ3IiwiRXJyb3IiLCJTdHJpbmciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIl9vbmNlV3JhcCIsInN0YXRlIiwiZmlyZWQiLCJ3cmFwRm4iLCJ3cmFwcGVkIiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsImFyciIsInJldCIsIkFycmF5IiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJjb3B5Iiwic2V0IiwiYXJnIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVycm9yIiwiZXIiLCJlcnIiLCJtZXNzYWdlIiwiY29udGV4dCIsImhhbmRsZXIiLCJsZW4iLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsIm9uIiwicHJlcGVuZExpc3RlbmVyIiwib25jZSIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0IiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInBvcCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwicHJvY2VzcyIsImVudiIsIlBST01JU0VfUVVFVUVfQ09WRVJBR0UiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImUiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJyb290IiwiZmFjdG9yeSIsIkxvY2FsUHJvbWlzZSIsIlByb21pc2UiLCJ0aGVuIiwiUXVldWUiLCJtYXhQZW5kaW5nUHJvbWlzZXMiLCJtYXhRdWV1ZWRQcm9taXNlcyIsIm9wdGlvbnMiLCJwZW5kaW5nUHJvbWlzZXMiLCJJbmZpbml0eSIsImNvbmZpZ3VyZSIsIkdsb2JhbFByb21pc2UiLCJhZGQiLCJwcm9taXNlR2VuZXJhdG9yIiwic2VsZiIsInJlc29sdmUiLCJyZWplY3QiLCJub3RpZnkiLCJfZGVxdWV1ZSIsImdldFBlbmRpbmdMZW5ndGgiLCJnZXRRdWV1ZUxlbmd0aCIsIml0ZW0iLCJvbkVtcHR5IiwiQURERURfTElOS1MiLCJMSVNURU5JTkdfTElOS1MiLCJnZXRMaW5rcyIsImRvY3VtZW50IiwiYm9keSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXAiLCJhIiwiaHJlZiIsImZpbHRlciIsImxpbmsiLCJ0ZXN0IiwibGlua3MiLCJ3cmFwcGVyIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhbnlBZGRlZCIsIm5ld0xpbmtzIiwiaW5jbHVkZXMiLCJsb2ciLCJnZXRNZXRhRGF0YSIsIm1ldGFEYXRhIiwibWV0YSIsImNvbnRlbnQiLCJnZXRBdHRyaWJ1dGUiLCJtYXRjaCIsIltvYmplY3QgT2JqZWN0XSIsInJlcGxhY2UiLCJyZWR1Y2UiLCJiIiwidXNlciIsImRlc2NyaXB0aW9uIiwiaWQiLCJ1cmwiLCJzcGxpdCIsImdldExpbmtEYXRhIiwiYXN5bmMiLCJkaXYiLCJpbm5lckhUTUwiLCJodG1sIiwiZGF0YSIsImluZm8iLCJtYXhDb25jdXJyZW50IiwicHJvbXB0IiwicHJvbWlzZV9xdWV1ZV9kZWZhdWx0IiwiZmV0Y2hJRnJhbWVEYXRhIiwiZWwiLCJpZnJhbWUiLCJjb250ZW50V2luZG93IiwicmVtb3ZlIiwiZ2V0SUZyYW1lRGF0YSIsInNyYyIsInN0eWxlIiwiZGlzcGxheSIsImxvYWQiLCJycyIsIm9ubG9hZCIsIm1ha2VJRnJhbWUiLCJmZXRjaExpbmtEYXRhIiwiZmV0Y2giLCJ0ZXh0IiwiYWRkMlF1ZXVlIiwicGciLCJwaG90b3MiLCJhZGRlZExpbmtzIiwicGhvdG9Qcm9taXNlIiwicXVldWVMaW5rcyIsIm9ua2V5ZG93biIsImZpbGVzIiwiZXZ0b2JqIiwid2luZG93IiwiZXZlbnQiLCJrZXlDb2RlIiwiY3RybEtleSIsImZpbGUiLCJleHBvcnRPYmoiLCJleHBvcnROYW1lIiwiZGF0YVN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkb3dubG9hZEFuY2hvck5vZGUiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwiZG93bmxvYWRKc29uIiwic2F2ZUxpbmtzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFB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SUFHQSxPQUZjaEgsRUFBS3NDLElBQUEwRSxJQXFCbkJDLEVBQUEsR0FDQW5MLEVBQU9xQyxHQUFJOEUsRUFkWGdFLElBQUEzQixNQUFBNEIsR0FNQUEsRUFDQTNELElBQUFxRCxHQUNBckQsSUFBQXdELEdBQ0F4RCxJQVJBK0IsVUFDQTJCLEVBQUF6TCxXQUFBMkwsR0FDQUEsSUFXc0JDLENBQUFILElBQ3RCbkwsRUFBT1IsS0FBTTRILEdBRWJsSCxRQUFBcUksSUFBWXJFLEdBRVpoRSxRQUFBcUksSUFBQSwwQkFDQWpCLFNBQUFpRSxVRmpDT0MsSUFBQXpILElBQ1AsTUFBQTBILEVBQUFDLE9BQUFDLFlBQUE1SCxFQUNBLElBQUEwSCxFQUFBRyxTQUFBSCxFQUFBSSxTQUNBTCxFQUFBL0QsSUFBQSxDQUFBcUUsRUFBQXpRLElHQU8sRUFBQTBRLEVBQUFDLEtBQ1AsTUFBQUMsRUFBQSwrQkFBQUMsbUJBQUFDLEtBQUFDLFVBQUFMLElBQ0FNLEVBQUEvRSxTQUFBVyxjQUFBLEtBRUFvRSxFQUFBQyxhQUFBLE9BQUFMLEdBQ0FJLEVBQUFDLGFBQUEsV0FBQU4sRUFBQSxTQUVBMUUsU0FBQUMsS0FBQWdGLFlBQUFGLEdBRUFBLEVBQUFHLFFBQ0FILEVBQUFoQyxVSFYrQm9DLENBQVlYLFdBQWdCelEsT0U4QnRDcVIsQ0FBUyxDQUFBdkIiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1KTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiAkZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIFJlZmxlY3RBcHBseSh0aGlzLmxpc3RlbmVyLCB0aGlzLnRhcmdldCwgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzLmVudi5QUk9NSVNFX1FVRVVFX0NPVkVSQUdFID9cbiAgICByZXF1aXJlKCcuL2xpYi1jb3YnKSA6XG4gICAgcmVxdWlyZSgnLi9saWInKTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiBnbG9iYWwgZGVmaW5lLCBQcm9taXNlICovXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIENvbW1vbkpTXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIHJvb3QuUXVldWUgPSBmYWN0b3J5KCk7XG4gICAgfVxufSlcbih0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHZhciBMb2NhbFByb21pc2UgPSB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgPyBQcm9taXNlIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGhlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVldWUuY29uZmlndXJlKCkgYmVmb3JlIHVzZSBRdWV1ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtMb2NhbFByb21pc2V9XG4gICAgICovXG4gICAgdmFyIHJlc29sdmVXaXRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBMb2NhbFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSXQgbGltaXRzIGNvbmN1cnJlbnRseSBleGVjdXRlZCBwcm9taXNlc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFttYXhQZW5kaW5nUHJvbWlzZXM9SW5maW5pdHldIG1heCBudW1iZXIgb2YgY29uY3VycmVudGx5IGV4ZWN1dGVkIHByb21pc2VzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFttYXhRdWV1ZWRQcm9taXNlcz1JbmZpbml0eV0gIG1heCBudW1iZXIgb2YgcXVldWVkIHByb21pc2VzXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHF1ZXVlID0gbmV3IFF1ZXVlKDEpO1xuICAgICAqXG4gICAgICogcXVldWUuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgLy8gcmVzb2x2ZSBvZiB0aGlzIHByb21pc2Ugd2lsbCByZXN1bWUgbmV4dCByZXF1ZXN0XG4gICAgICogICAgIHJldHVybiBkb3dubG9hZFRhcmJhbGxGcm9tR2l0aHViKHVybCwgZmlsZSk7XG4gICAgICogfSlcbiAgICAgKiAudGhlbihmdW5jdGlvbiAoZmlsZSkge1xuICAgICAqICAgICBkb1N0dWZmV2l0aChmaWxlKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHF1ZXVlLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICogICAgIHJldHVybiBkb3dubG9hZFRhcmJhbGxGcm9tR2l0aHViKHVybCwgZmlsZSk7XG4gICAgICogfSlcbiAgICAgKiAvLyBUaGlzIHJlcXVlc3Qgd2lsbCBiZSBwYXVzZWRcbiAgICAgKiAudGhlbihmdW5jdGlvbiAoZmlsZSkge1xuICAgICAqICAgICBkb1N0dWZmV2l0aChmaWxlKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBRdWV1ZShtYXhQZW5kaW5nUHJvbWlzZXMsIG1heFF1ZXVlZFByb21pc2VzLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLnBlbmRpbmdQcm9taXNlcyA9IDA7XG4gICAgICAgIHRoaXMubWF4UGVuZGluZ1Byb21pc2VzID0gdHlwZW9mIG1heFBlbmRpbmdQcm9taXNlcyAhPT0gJ3VuZGVmaW5lZCcgPyBtYXhQZW5kaW5nUHJvbWlzZXMgOiBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5tYXhRdWV1ZWRQcm9taXNlcyA9IHR5cGVvZiBtYXhRdWV1ZWRQcm9taXNlcyAhPT0gJ3VuZGVmaW5lZCcgPyBtYXhRdWV1ZWRQcm9taXNlcyA6IEluZmluaXR5O1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBwcm9taXNlIHByb21pc2VGYWN0b3J5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gR2xvYmFsUHJvbWlzZVxuICAgICAqL1xuICAgIFF1ZXVlLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uIChHbG9iYWxQcm9taXNlKSB7XG4gICAgICAgIExvY2FsUHJvbWlzZSA9IEdsb2JhbFByb21pc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb21pc2VHZW5lcmF0b3JcbiAgICAgKiBAcmV0dXJuIHtMb2NhbFByb21pc2V9XG4gICAgICovXG4gICAgUXVldWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChwcm9taXNlR2VuZXJhdG9yKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBMb2NhbFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCwgbm90aWZ5KSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgcXVldWUgdG8gbXVjaCBwcm9taXNlc1xuICAgICAgICAgICAgaWYgKHNlbGYucXVldWUubGVuZ3RoID49IHNlbGYubWF4UXVldWVkUHJvbWlzZXMpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdRdWV1ZSBsaW1pdCByZWFjaGVkJykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIHRvIHF1ZXVlXG4gICAgICAgICAgICBzZWxmLnF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgIHByb21pc2VHZW5lcmF0b3I6IHByb21pc2VHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBub3RpZnk6IG5vdGlmeSB8fCBub29wXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VsZi5fZGVxdWV1ZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHNpbXVsdGFuZW91c2x5IHJ1bm5pbmcgcHJvbWlzZXMgKHdoaWNoIGFyZSByZXNvbHZpbmcpXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgUXVldWUucHJvdG90eXBlLmdldFBlbmRpbmdMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdQcm9taXNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHF1ZXVlZCBwcm9taXNlcyAod2hpY2ggYXJlIHdhaXRpbmcpXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgUXVldWUucHJvdG90eXBlLmdldFF1ZXVlTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5sZW5ndGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGZpcnN0IGl0ZW0gcmVtb3ZlZCBmcm9tIHF1ZXVlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBRdWV1ZS5wcm90b3R5cGUuX2RlcXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1Byb21pc2VzID49IHRoaXMubWF4UGVuZGluZ1Byb21pc2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgZnJvbSBxdWV1ZVxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMucXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9uRW1wdHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMub25FbXB0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ1Byb21pc2VzKys7XG5cbiAgICAgICAgICAgIHJlc29sdmVXaXRoKGl0ZW0ucHJvbWlzZUdlbmVyYXRvcigpKVxuICAgICAgICAgICAgLy8gRm9yd2FyZCBhbGwgc3R1ZmZcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgaXMgbm90IHBlbmRpbmcgbm93XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucGVuZGluZ1Byb21pc2VzLS07XG4gICAgICAgICAgICAgICAgICAgIC8vIEl0IHNob3VsZCBwYXNzIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZXF1ZXVlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJdCBpcyBub3QgcGVuZGluZyBub3dcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wZW5kaW5nUHJvbWlzZXMtLTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgc2hvdWxkIG5vdCBtYXNrIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZXF1ZXVlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgc2hvdWxkIHBhc3Mgbm90aWZpY2F0aW9uc1xuICAgICAgICAgICAgICAgICAgICBpdGVtLm5vdGlmeShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzZWxmLnBlbmRpbmdQcm9taXNlcy0tO1xuICAgICAgICAgICAgaXRlbS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHNlbGYuX2RlcXVldWUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBRdWV1ZTtcbn0pO1xuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKClcclxuXHJcblxyXG5leHBvcnQgY29uc3Qge1xyXG4gICAgQURERURfTElOS1MgPSAnYWRkZWRfbGlua3MnLFxyXG4gICAgTElTVEVOSU5HX0xJTktTID0gJ2xpc3RlbmluZ19saW5rcydcclxufSA9IHt9IiwiaW1wb3J0IHsgZG93bmxvYWRKc29uIH0gZnJvbSAnLi4vaGVscGVycydcclxuaW1wb3J0IHsgQURERURfTElOS1MsIGVtaXR0ZXIsIExJU1RFTklOR19MSU5LUyB9IGZyb20gJy4uL2V2ZW50cydcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMaW5rcyA9ICgpID0+IFsuLi5kb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tocmVmXScpXVxyXG4gICAgLm1hcChhID0+IGEuaHJlZilcclxuICAgIC5maWx0ZXIobGluayA9PiAvaHR0cHM6XFwvXFwvd3d3XFwuaW5zdGFncmFtXFwuY29tXFwvcFxcLy8udGVzdChsaW5rKSlcclxuXHJcblxyXG5leHBvcnQgY29uc3Qgc2F2ZUxpbmtzID0gZmlsZXMgPT4gZSA9PiB7XHJcbiAgICBjb25zdCBldnRvYmogPSB3aW5kb3cuZXZlbnQgPyBldmVudCA6IGVcclxuICAgIGlmIChldnRvYmoua2V5Q29kZSA9PSA5MCAmJiBldnRvYmouY3RybEtleSkge1xyXG4gICAgICAgIGZpbGVzLm1hcCgoZmlsZSwgaSkgPT4gZG93bmxvYWRKc29uKGZpbGUsIGBsaW5rc18ke2l9YCkpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsaW5rcyA9IGdldExpbmtzKClcclxuXHJcbmV4cG9ydCBjb25zdCBsaXN0ZW5MaW5rcyA9ICgpID0+IHtcclxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignRE9NU3VidHJlZU1vZGlmaWVkJywgKCkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgYW55QWRkZWQgPSBmYWxzZVxyXG4gICAgICAgIGxldCBjb3VudCA9IDBcclxuXHJcbiAgICAgICAgY29uc3QgbmV3TGlua3MgPSBnZXRMaW5rcygpXHJcbiAgICAgICAgICAgIC5maWx0ZXIobGluayA9PiAhbGlua3MuaW5jbHVkZXMobGluaykpXHJcbiAgICAgICAgICAgIC5tYXAobGluayA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrXHJcbiAgICAgICAgICAgICAgICBhbnlBZGRlZCA9IHRydWVcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlua1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAobmV3TGlua3MubGVuZ3RoIDwgMSkgcmV0dXJuXHJcblxyXG4gICAgICAgIGxpbmtzLnB1c2goLi4ubmV3TGlua3MpXHJcbiAgICAgICAgZW1pdHRlci5lbWl0KEFEREVEX0xJTktTLCBuZXdMaW5rcywgbGlua3MpXHJcblxyXG4gICAgICAgIGlmIChhbnlBZGRlZClcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYGFkZGVkICR7Y291bnR9IGxpbmtzLCB0b3RhbDpgLCBsaW5rcy5sZW5ndGgpXHJcbiAgICB9KVxyXG59XHJcblxyXG4vLyBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnXHJcbmNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG5kb2N1bWVudC5ib2R5LmFwcGVuZCh3cmFwcGVyKVxyXG5cclxuZW1pdHRlci5vbihMSVNURU5JTkdfTElOS1MsICgpID0+IHtcclxuICAgIGVtaXR0ZXIuZW1pdChBRERFRF9MSU5LUywgbGlua3MsIGxpbmtzKVxyXG4gICAgbGlzdGVuTGlua3MoKVxyXG59KVxyXG5cclxuLyoqIFxyXG4gKiBAcGFyYW0geyBIVE1MTWV0YUVsZW1lbnRbXSB9IGFyclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldE1ldGFEYXRhID0gYXJyID0+IHtcclxuICAgIGNvbnN0IG1ldGFEYXRhID0gYXJyLm1hcChtZXRhID0+IHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnQgfSA9IG1ldGFcclxuICAgICAgICBjb25zdCBuYW1lID0gbWV0YS5nZXRBdHRyaWJ1dGUoJ3Byb3BlcnR5JylcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgbmFtZSwgY29udGVudCB9XHJcbiAgICB9KVxyXG4gICAgICAgIC5maWx0ZXIoYSA9PiBhLm5hbWUgJiYgYS5uYW1lLm1hdGNoKC9vZzouKy8pKVxyXG4gICAgICAgIC5tYXAobWV0YSA9PiB7XHJcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7ICd0aXRsZScgfCAnaW1hZ2UnIHwgJ2Rlc2NyaXB0aW9uJyB8ICd1cmwnIHwgJ3R5cGUnIH0gKi9cclxuICAgICAgICAgICAgbGV0IG5hbWUgPSBtZXRhLm5hbWUucmVwbGFjZSgnb2c6JywgJycpXHJcblxyXG4gICAgICAgICAgICByZXR1cm4geyBbbmFtZV06IG1ldGEuY29udGVudCB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZmlsdGVyKGEgPT4gISFhKVxyXG4gICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGJba2V5XVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uYSxcclxuICAgICAgICAgICAgICAgICAgICBba2V5XTogZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICBtZXRhRGF0YS51c2VyID0gbWV0YURhdGEuZGVzY3JpcHRpb24ubWF0Y2goL0AoW15cXHMpXSspLylbMV1cclxuICAgIG1ldGFEYXRhLmlkID0gbWV0YURhdGEudXJsLnNwbGl0KC9cXC8oLis/KVxcLy8pWzNdXHJcblxyXG4gICAgcmV0dXJuIG1ldGFEYXRhXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgbWFrZUlGcmFtZSA9IHNyYyA9PiB7XHJcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpXHJcbiAgICBlbC5zcmMgPSBzcmNcclxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuXHJcbiAgICAvKipAdHlwZSB7IFByb21pc2U8SFRNTElGcmFtZUVsZW1lbnQ+IH0gKi9cclxuICAgIGNvbnN0IGxvYWQgPSBuZXcgUHJvbWlzZShycyA9PiBlbC5vbmxvYWQgPSAoKSA9PiBycyhlbCkpXHJcbiAgICBjb25zdCBhZGQgPSAoKSA9PiB7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQoZWwpXHJcbiAgICAgICAgcmV0dXJuIGxvYWRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBlbCwgYWRkLCByZW1vdmU6ICgpID0+IGVsLnJlbW92ZSgpIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldElGcmFtZURhdGEgPSBhc3luYyBpZnJhbWUgPT4ge1xyXG4gICAgY29uc3QgZWwgPSBhd2FpdCBpZnJhbWUuYWRkKClcclxuXHJcbiAgICBjb25zdCBkYXRhID0gZ2V0TWV0YURhdGEoWy4uLmVsLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbWV0YScpXSlcclxuICAgIGNvbnNvbGUuaW5mbyhgR290IGltYWdlIGZyb20gQCR7ZGF0YS51c2VyfWApXHJcblxyXG4gICAgaWZyYW1lLnJlbW92ZSgpXHJcblxyXG4gICAgcmV0dXJuIGRhdGFcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMaW5rRGF0YSA9IGFzeW5jIGh0bWwgPT4ge1xyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgIGRpdi5pbm5lckhUTUwgPSBodG1sXHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGdldE1ldGFEYXRhKFsuLi5kaXYucXVlcnlTZWxlY3RvckFsbCgnbWV0YScpXSlcclxuICAgIGNvbnNvbGUuaW5mbyhgR290IGltYWdlIGZyb20gQCR7ZGF0YS51c2VyfWApXHJcblxyXG4gICAgcmV0dXJuIGRhdGFcclxufSIsImltcG9ydCBRdWV1ZSBmcm9tICdwcm9taXNlLXF1ZXVlJ1xyXG5cclxuY29uc3QgbWF4Q29uY3VycmVudCA9IE51bWJlcihwcm9tcHQoJ0NvbmN1cnJlbnQnKSkgfHwgMlxyXG5jb25zdCBtYXhRdWV1ZSA9IEluZmluaXR5XHJcbmV4cG9ydCBjb25zdCBxdWV1ZSA9IG5ldyBRdWV1ZShtYXhDb25jdXJyZW50LCBtYXhRdWV1ZSkiLCJcclxuaW1wb3J0IHsgZ2V0TGlua0RhdGEsIHNhdmVMaW5rcywgZ2V0SUZyYW1lRGF0YSwgbWFrZUlGcmFtZSB9IGZyb20gJy4vRE9NJ1xyXG5pbXBvcnQgeyBBRERFRF9MSU5LUywgTElTVEVOSU5HX0xJTktTLCBlbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJ1xyXG5pbXBvcnQgeyBxdWV1ZSB9IGZyb20gJy4vcXVldWUnXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoSUZyYW1lRGF0YSA9IGxpbmsgPT4gKCkgPT4gZ2V0SUZyYW1lRGF0YShtYWtlSUZyYW1lKGxpbmspKVxyXG5leHBvcnQgY29uc3QgZmV0Y2hMaW5rRGF0YSA9IGxpbmsgPT4gKCkgPT4gZmV0Y2gobGluaylcclxuICAgIC50aGVuKHIgPT4gci50ZXh0KCkpXHJcbiAgICAudGhlbihnZXRMaW5rRGF0YSlcclxuXHJcblxyXG5jb25zdCBhZGQyUXVldWUgPSBwZyA9PiB7XHJcbiAgICBjb25zdCBxID0gcXVldWUuYWRkKHBnKVxyXG5cclxuICAgIHJldHVybiBxXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyBzdHJpbmdbXSB9IGFkZGVkTGlua3MgXHJcbiAqL1xyXG5jb25zdCBxdWV1ZUxpbmtzID0gcGhvdG9zID0+IGFzeW5jIChhZGRlZExpbmtzKSA9PiB7XHJcbiAgICBjb25zdCBwdXNoUGhvdG9zID0gYXN5bmMgcGhvdG9Qcm9taXNlID0+IHtcclxuICAgICAgICBwaG90b3MucHVzaChhd2FpdCBwaG90b1Byb21pc2UpXHJcbiAgICAgICAgcmV0dXJuIHBob3RvUHJvbWlzZVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhZGRlZExpbmtzXHJcbiAgICAgICAgLm1hcChmZXRjaExpbmtEYXRhKVxyXG4gICAgICAgIC5tYXAoYWRkMlF1ZXVlKVxyXG4gICAgICAgIC5tYXAocHVzaFBob3RvcylcclxufVxyXG5cclxuXHJcbmNvbnN0IHBob3RvcyA9IFtdXHJcbmVtaXR0ZXIub24oQURERURfTElOS1MsIHF1ZXVlTGlua3MocGhvdG9zKSlcclxuZW1pdHRlci5lbWl0KExJU1RFTklOR19MSU5LUylcclxuXHJcbmNvbnNvbGUubG9nKHF1ZXVlKVxyXG5cclxuY29uc29sZS5sb2coJ1xcbkNUUkwgKyBaIHRvIGRvd25sb2FkJylcclxuZG9jdW1lbnQub25rZXlkb3duID0gc2F2ZUxpbmtzKFtwaG90b3NdKVxyXG4iLCIvKiogQHR5cGUgezxUPihhcnI6IFRbXSwgbGVuOiBudW1iZXIpID0+IFRbXVtdfSAqL1xyXG5leHBvcnQgY29uc3QgY2h1bmtBcnIgPSAoYXJyLCBsZW4pID0+IHtcclxuICAgIGNvbnN0IGNodW5rcyA9IFtdXHJcbiAgICBjb25zdCBuID0gYXJyLmxlbmd0aFxyXG5cclxuICAgIGxldCBpID0gMFxyXG4gICAgd2hpbGUgKGkgPCBuKSBjaHVua3MucHVzaChhcnIuc2xpY2UoaSwgaSArPSBsZW4pKVxyXG5cclxuICAgIHJldHVybiBjaHVua3NcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRvd25sb2FkSnNvbiA9IChleHBvcnRPYmosIGV4cG9ydE5hbWUpID0+IHtcclxuICAgIGNvbnN0IGRhdGFTdHIgPSAnZGF0YTp0ZXh0L2pzb25jaGFyc2V0PXV0Zi04LCcgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZXhwb3J0T2JqKSlcclxuICAgIGNvbnN0IGRvd25sb2FkQW5jaG9yTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxyXG5cclxuICAgIGRvd25sb2FkQW5jaG9yTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBkYXRhU3RyKVxyXG4gICAgZG93bmxvYWRBbmNob3JOb2RlLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBleHBvcnROYW1lICsgJy5qc29uJylcclxuXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvd25sb2FkQW5jaG9yTm9kZSlcclxuXHJcbiAgICBkb3dubG9hZEFuY2hvck5vZGUuY2xpY2soKVxyXG4gICAgZG93bmxvYWRBbmNob3JOb2RlLnJlbW92ZSgpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAdGVtcGxhdGUgVCwgU1xyXG4gKiBAcGFyYW0geyBUIH0gb2JqXHJcbiAqIEBwYXJhbSB7IChpdGVtOiBrZXlvZiBULCBwcm9wZXJ0eTogc3RyaW5nKSA9PiBTIH0gY2JcclxuICogQHJldHVybnMgeyBTW10gfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9iaihvYmosIGNiKSB7XHJcbiAgICBjb25zdCBhcnIgPSBbXVxyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IG9ialtrZXldXHJcblxyXG4gICAgICAgIGFyci5wdXNoKGNiKGl0ZW0sIGtleSkpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFyclxyXG59XHJcblxyXG4vKipcclxuICogQHRlbXBsYXRlIFRcclxuICogQHBhcmFtIHsgVCB9IG9ialxyXG4gKiBAcGFyYW0geyAoaXRlbToga2V5b2YgVCwgcHJvcGVydHk6IHN0cmluZykgPT4gYm9vbGVhbiB9IGNiXHJcbiAqIEByZXR1cm5zIHsgW2tleW9mIFQsIHN0cmluZ10gfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1hcEZpbmRPYmoob2JqLCBjYikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gb2JqW2tleV1cclxuXHJcbiAgICAgICAgY29uc3QgYm9vbCA9IGNiKGl0ZW0sIGtleSlcclxuXHJcbiAgICAgICAgaWYgKGJvb2wpIHJldHVybiBbaXRlbSwga2V5XVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSYW5kb21seSBzaHVmZmxlIGFuIGFycmF5XHJcbiAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNDUwOTc2LzEyOTMyNTZcclxuICogQHRlbXBsYXRlIFRcclxuICogQHBhcmFtICB7IFRbXSB9IGFyciBUaGUgYXJyYXkgdG8gc2h1ZmZsZVxyXG4gKiBAcmV0dXJuIHsgVFtdIH0gICAgICBUaGUgZmlyc3QgaXRlbSBpbiB0aGUgc2h1ZmZsZWQgYXJyYXlcclxuICovXHJcbmV4cG9ydCBjb25zdCBzaHVmZmxlID0gYXJyID0+IHtcclxuICAgIGNvbnN0IGFycmF5ID0gWy4uLmFycl1cclxuXHJcbiAgICBsZXQgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoXHJcbiAgICBsZXQgdGVtcG9yYXJ5VmFsdWUsIHJhbmRvbUluZGV4XHJcblxyXG4gICAgLy8gV2hpbGUgdGhlcmUgcmVtYWluIGVsZW1lbnRzIHRvIHNodWZmbGUuLi5cclxuICAgIHdoaWxlICgwICE9PSBjdXJyZW50SW5kZXgpIHtcclxuICAgICAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnQuLi5cclxuICAgICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleClcclxuICAgICAgICBjdXJyZW50SW5kZXggLT0gMVxyXG5cclxuICAgICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSBhcnJheVtjdXJyZW50SW5kZXhdXHJcbiAgICAgICAgYXJyYXlbY3VycmVudEluZGV4XSA9IGFycmF5W3JhbmRvbUluZGV4XVxyXG4gICAgICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRlbXBvcmFyeVZhbHVlXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyBudW1iZXIgfSB3IFxyXG4gKiBAcGFyYW0geyBudW1iZXIgfSBoIFxyXG4gKiBAcmV0dXJucyB7IG51bWJlcltdIH0gW3dpZHRoLCBoZWlnaHQsIHRvdGFsXVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlc29sdXRpb24yUmF0aW8gPSAodywgaCkgPT4ge1xyXG4gICAgY29uc3QgZ2NkID0gKHcsIGgpID0+IChoID09IDApID8gdyA6IGdjZChoLCB3ICUgaClcclxuICAgIGNvbnN0IHIgPSBnY2QodywgaClcclxuXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHcgLyByLFxyXG4gICAgICAgIGggLyByLFxyXG4gICAgICAgIHJcclxuICAgIF1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNvcnRBc2MgPSAoYSwgYikgPT4ge1xyXG4gICAgaWYgKGEgPiBiKSByZXR1cm4gMVxyXG4gICAgaWYgKGEgPCBiKSByZXR1cm4gLTFcclxuXHJcbiAgICByZXR1cm4gMFxyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHsgSFRNTEVsZW1lbnQgfSBlbFxyXG4gKiBAcGFyYW0geyBzdHJpbmcgfSBjbGFzc05hbWVcclxuICovXHJcbmV4cG9ydCBjb25zdCB0b2dnbGVDbGFzc05hbWUgPSAoZWwsIGNsYXNzTmFtZSkgPT4ge1xyXG4gICAgY29uc3QgaGFzQ2xhc3MgPSBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKVxyXG5cclxuICAgIGhhc0NsYXNzXHJcbiAgICAgICAgPyBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSlcclxuICAgICAgICA6IGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxyXG5cclxuICAgIHJldHVybiBoYXNDbGFzc1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdG9nZ2xlSGlkZSA9IGVsID0+IHRvZ2dsZUNsYXNzTmFtZShlbCwgJ2hpZGRlbicpICJdLCJzb3VyY2VSb290IjoiIn0=